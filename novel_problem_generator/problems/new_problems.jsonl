{"task_id": "hard/1", "prompt": "def find_min_swaps_to_group_red_balls(balls):\n    \"\"\"\n    You are given a string `balls` representing a row of balls, where each ball is either 'R' (red) or 'W' (white). Your task is to determine the minimum number of swaps needed to group all red balls together.\n\n    A swap consists of choosing two adjacent balls and swapping their positions.\n\n    Example:\n    For balls = 'WRRWWR', the output should be 2. By swapping the second 'W' with the first 'R', and then the last 'W' with the second last 'R', the string becomes 'RRRRWW'.\n\n    For an empty string or a string with no red balls, return 0.\n    \"\"\"\n", "canonical_solution": "    def find_min_swaps_to_group_red_balls(balls):\n        red_indices = [i for i, ball in enumerate(balls) if ball == 'R']\n        if not red_indices:\n            return 0\n        mid_index = len(red_indices) // 2\n        median_red_position = red_indices[mid_index]\n        return sum(abs(red_index - (median_red_position + i - mid_index)) for i, red_index in enumerate(red_indices))\n", "test": "def check(candidate):\n    assert candidate('WRRWWR') == 2\n    assert candidate('') == 0\n    assert candidate('RRRR') == 0\n    assert candidate('WRRWWRRWWR') == 4\n    assert candidate('WRRRRW') == 1\n    assert candidate('WWRRRWWRRRW') == 6\n    assert candidate('WWWWW') == 0\n    assert candidate('RRWRR') == 1", "entry_point": "find_min_swaps_to_group_red_balls", "extra_info": {"cover_story_words": [], "topics": [], "field": "", "cleaned_prompt": "Given a string representing a row of balls, where 'R' stands for red and 'W' stands for white, determine the minimum swaps required to group all red balls together in the sequence. Each swap is performed between two adjacent balls.", "warnings": ["Solution failed correctness check."]}}
{"task_id": "hard/1", "prompt": "def decode_expression(encoded):\n    \"\"\"\n    You have been given an encoded string where each character's ASCII value has been change according to a secret function called `f(x)`. The function `f(x)` can be defined as follows:\n    \n    f(x) = (x * 3 + 7) % 256\n    \n    Given this encoded string, your task is to create a function `decode_expression` that will decode it back to its original form using the inverse of the function `f(x)`.\n    \n    Examples:\n    - If the input is 'K[c', after decoding each character, the output should be 'abc'.\n    - Similarly, input 'Rgf' should decode to 'xyz'.\n    \n    Assume the encoded strings consist only of printable characters.\n    \"\"\"\n", "canonical_solution": "    def decode_character(y):\n        for x in range(256):\n            if (x * 3 + 7) % 256 == y:\n                return chr(x)\n    \n    return ''.join(decode_character(ord(c)) for c in encoded)", "test": "def check(candidate):\n    assert candidate('K[c') == 'abc'\n    assert candidate('Rgf') == 'xyz'\n    assert candidate('<jda') == '1234'\n    assert candidate('G^J]') == 'XYZ['\n    assert candidate('Sa^tg!') == 'lorem!'\n    assert candidate('') == ''\n", "entry_point": "decode_expression", "extra_info": {"cover_story_words": [], "topics": [], "field": "", "cleaned_prompt": "You have an encoded string where each character's ASCII value has been modified by a function f(x) = (x * 3 + 7) % 256. Write a function `decode_expression` that decodes the string using the inverse of this function. Input assumes printable characters, and examples are provided for clarity.", "warnings": ["Solution failed correctness check. reason: failed: "]}}
