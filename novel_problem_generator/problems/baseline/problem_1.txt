**Problem Statement:**
You have to create an inverted pyramid pattern using numbers. The input will be an integer `n` representing the number of rows in the pattern. The first row should contain numbers from 1 up to `n`, the second row should contain numbers from 1 up to `n-1`, and so on, until the last row which contains just the number 1.

**Example:**

*Input:* 
```
5
```

*Output:*
```
1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1
```

**Note:** 
Each row's numbers are separated by a single space and every row except the first has leading spaces: each subsequent row has one more leading space than the previous one.

**Constraints:**
- 1 <= n <= 50

**Python Solution:**

```python
def print_inverted_pyramid(n):
    for i in range(n):
        # Print the leading spaces
        print(' ' * i, end='')
        # Print the numbers
        for j in range(1, n - i):
            print(j, end=' ')
        # Print the last number without a space
        print(n - i)
        
# Testing the function
print_inverted_pyramid(5)
```

This will output:

```
1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1
```

This solution makes use of nested loops: the outer loop manages the rows, and the inner loop prints the numbers in a row. The `print(' ' * i, end='')` expression is used to handle the leading spaces for indenting each row to achieve the inverted pyramid shape.