Coding Exercise:
You are given a matrix of m x n dimensions filled with integers, and your task is to rotate the matrix by 90 degrees to the right (clockwise). You should modify the matrix in-place (do not return anything), and you must not use any extra space to do so (i.e., O(1) space complexity).

Example:
Input:
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
]
Output:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]

Constraints:
- matrix is a 2D array of integers.
- m == matrix.length (the number of rows).
- n == matrix[0].length (the number of columns).
- 1 <= m, n <= 20
- -1000 <= matrix[i][j] <= 1000

Canonical Python Solution:
```python
def rotate(matrix):
    """
    Do not return anything, modify matrix in-place instead.
    """
    n = len(matrix)
    # First, transpose the matrix
    for i in range(n):
        for j in range(i, n):
            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
    
    # Then, flip the matrix horizontally
    for i in range(n):
        matrix[i].reverse()
```

Explanation:
1. The `rotate` function first transposes the matrix, which means converting all rows to columns (and vice versa). This is done by swapping matrix[i][j] with matrix[j][i] for all j >= i.
2. After transposing, we reverse each row of the matrix. This transforms the matrix to rotate it by 90 degrees clockwise.

This solution has a time complexity of O(n^2) where n is the number of rows (or columns) in the matrix, which is optimal for this problem given the constraints, and uses O(1) additional space as required.